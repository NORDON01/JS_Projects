/********************* J S   P R O J E C T S  *********************/

**************************
01-GENERER UN CODE COULEUR
**************************

//Affiche la couleur qui correspond au code 
//hexadecimal (#a5...8) sur 6 caractères (0,1...E, F):
document.body.style.backgroundColor = nbreHex;

//Affiche le code proprement dit (#a5...8)
color.textContent = nbreHex;

*********
04-NAVBAR
*********
=> 1 HTML: Bouton "Hamburger + liste <ul> de classe ".links"
    <button class="nav-toggle">
            <i class="fas fa-bars"></i>
    </button>

     <ul class="links">     //Liste à toggler (montrer/cacher)
        <li >
          <a href="index.html">home</a>
        </li>
        .../..
     </ul>        

=> 2 CSS: 2 classes pour montrer/cacher la liste de classe ".links"
     .links{
        height:0;
        overflow:hidden;
        transition: var(--transition);
     }

     .show-links{       //Cette classe est ajoutée ou supprimée(CSS!!!)
        height:10rem    //Pour 4 adresses <li>
     }
=> 3 JS: 
     const liste = document.querySelector('.links');
     const hamburger = document.querySelector('.nav-toggle');

    //Le(s) bouton(s) reçoivent des écouteurs !!!:
   -31 hamburger.addEventListener('click', function(){
    if(liste.classList.contains('show-links')){
        liste.classList.remove('show-links')
    }else{liste.classList.add('show-links')}
   })
            OU (si un seul bouton, une seule class)

    - 32 hamburger.addEventListener('click', function(){
        //Elmt à montrer/cacher.classList.toggle('CSS'): 
        links.classList.toggle('show-links');        
    })               
        log(links.classList);

********
06-MODAL
********
  A modal is a dialog box/popup window that is displayed on top of
  the current page - Open Modal.
  A widely adopted CSS naming practice is to use "hero" as the 
  class name applied to a site's main banner.

************************************
07-1- QUESTIONS - TRAVERSING THE DOM
************************************
const btns = document.querySelectorAll('.question-btn');
log(btns);

btns.forEach(function(btn){
    btn.addEventListener("click", function(evt){
        log(evt.currentTarget);
        //On "traverse" jusqu'au grand- parent du btn:
        const question = evt.currentTarget.parentElement.parentElement;
        //On ajoute / supprime la classe "show-text" à la classList du grand parent:
        question.classList.toggle("show-text");
    });
});
   
Où "question" est une classe du grand-parent des btns.

***************************************************
07-2 QUESTIONS - USING SELECTORS INSIDE THE ELEMENT
***************************************************
questions.forEach(function(question){
    /* Rechercher le bouton de la seule question (!= document): */
   const btn = question.querySelector('.question-btn');
   /* Ajouter un écouteur à ce seul bouton */
   btn.addEventListener('click', function(){
    /* Parcourir à nouveau la liste des questions (items) */
   questions.forEach(function(item){
    /* Comparer chaque item à la question qui reçoit l'écouteur */
    if(item !== question){
    item.classList.remove('show-text')}
    else {question.classList.toggle('show-text')}
   })
   })
})

********************************
08-DISPLAY ITEMS WHEN PAGE LOADS
********************************
HTML:
        <!-- single item 1 -->
        <article class="menu-item">
          <img src="./menu-item.jpeg" alt="photo" class="photo">
          <div class="item-info">
            <header>
              <h4>butter milk pancakes</h4>
              <h4 class="price">$15</h4>
            </header>
            <p class="item-text" >Lorem ipsum dolor sit amet consectetur adipisicing
               elit. Consequuntur voluptates quae velit? Ea atque 
               maxime soluta. Tempore maxime provident dolorem.</p>
          </div>
        </article>
        <!-- end single item 1 -->

app.js:
const log = console.log;
let displayMenu = []; 
const sectionCenter = document.querySelector('.section-center');
window.addEventListener('DOMContentLoaded', function(){
    displayMenu = menu.map(function(item){
    return `<article class="menu-item">
          <img src=${item.img} alt=${item.title} class="photo">
          <div class="item-info">
            <header>
              <h4>${item.title}</h4>
              <h4 class=${item.price}>$15</h4>
            </header>
            <p>${item.desc}</p>
          </div>
        </article>`
  })
  log(displayMenu);
  displayMenu = displayMenu.join("");
  sectionCenter.innerHTML = displayMenu;
})

***********
08-REFACTOR
***********
L'opération consiste à créer une fonction "displayMenuItems"
qui est paramétrable et peut recevoir n'importe quelle array d'items
dont "menu" qui comprend 9 items:


const sectionCenter = document.querySelector('.section-center');
window.addEventListener('DOMContentLoaded', function(){
    displayMenuItems(menu)              //Appel de la nouvelle fonction
})

function displayMenuItems(menuItems){   //Nouvelle fonction paramétrable
  let displayMenu = menuItems.map(function(item){
    return `<article class="menu-item">
          <img src=${item.img} alt=${item.title} class="photo">
          <div class="item-info">
            <header>
              <h4>${item.title}</h4>
              <h4 class=${item.price}>$15</h4>
            </header>
            <p>${item.desc}</p>
          </div>
        </article>`
  })
  log(displayMenu);
  displayMenu = displayMenu.join("");
  sectionCenter.innerHTML = displayMenu;
}

************************
08-FILTER BUTTONS STATIQUES
************************
   data- : data-id, data-category, data-price...these data sets ara attributes of
an element which make the element more specific.
Dans le HTML, example: data-id="breakfast", data-id="all"...on aura:
<button class="filter-btn" type="button" data-id="lunch">lunch</button>
Et dans le JS (app.js):

 const filterBtns = document.querySelectorAll('.filter-btn');
filterBtns.forEach(function(btn){
  btn.addEventListener('click', function(evt){
=>const category = evt.currentTarget.dataset.id;/*category critère de sélection */
  const menuCategory = menu.filter(function(menuItem){
   /* La fonction filter - filtre = category - */
   if(menuItem.category === category)return menuItem;
   })
   /* Display menuCategory */
   if(category === "all") {displayMenuItems(menu)}
   else {displayMenuItems(menuCategory)}
  })
})

*******************
08-FILTER DYNAMIQUE
*******************
=>  Using REDUCE to remove duplicates:
    let categories = menu.map(function(item){
      return item.category;
    })
    log(categories); //(10) ['breakfast', 'lunch', 'shakes', 'breakfast', 
                     //'lunch', 'shakes', 'breakfast', 'lunch', 'shakes', 'dinner']

=>    categories = menu.reduce(function(values, item){
      if(!values.includes(item.category)){
          values.push(item.category)
      }
      return values;  //OBLIGATOIRE !!!
    },["all"])
    log(categories);(5) ['all', 'breakfast', 'lunch', 'shakes', 'dinner']

********
09-VIDEO
********
=>> Création d'un bouton marche/arrêt:
HTML:
  <!-- video switch -->
     <button class="switch-btn">
      <span>play</span>
      <span>pause</span>
      <span class="switch"></span>
     </button>

CSS:
/* switch button */
.switch-btn {
  position: absolute;
  bottom: 7%;
  left: 7%;
  width: 7rem;
  height: 2rem;
  display: flex;
  border-radius: var(--radius);
  align-items: center;
  justify-content: space-around;
  border: none;
  transition: var(--transition);
}
.switch-btn span {
  display: inline-block;
  font-size: 0.85rem;
  cursor: pointer;
  text-transform: capitalize;
  color: var(--clr-primary-5);
}
.switch {
  position: absolute;
  width: 50%;
  height: 100%;
  top: 0;
  left: 0;
  background: var(--clr-primary-5);
  border-radius: var(--radius);
  margin: 0;
  display: block;
  transition: var(--transition);
}

.slide .switch {
  left: 50%;
}     

JS:
const btn = document.querySelector('.switch-btn');
const video = document.querySelector('.video-container');

btn.addEventListener('click', function(){
    if(btn.classList.contains('slide')) {
        btn.classList.remove('slide');
        video.play();
    }else{
        btn.classList.add('slide');
        video.pause();
    }
})

=> Overlay
/* header after - BLACK OVERLAY */
 header::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);/* BLACK OVERLAY */
  z-index: -1;
}

=> Preloader:
HTML:
    <div class="preloader">
      <img src="./preloader.gif" alt="preloader">
    </div>

CSS:
.preloader {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--clr-white);
  display: grid;
  justify-content: center;
  align-items: center;
  visibility: visible;
  z-index: 999;
  transition: var(--transition);
}    

.hide-preloader {
  z-index: -999;
  visibility: hidden;
}

JS:
const preloader = document.querySelector('.preloader');
window.addEventListener('load', function(){ /* When ALL files are loaded */
    preloader.classList.add('hide-preloader');
})

***************
10-SCROLL STATIQUE
***************
=> Date:
  JS:
  let date = document.querySelector('#date');
  date.textContent = new Date().getFullYear; //Retourne l'année

=> Access Fontawesome:
HTML (Head):
   <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css"
   /> 

JS (statique): 
  navToggle.addEventListener('click', function(){
     linksContainer.classList.toggle("show-links");
  })

CSS:
  .show-links{
    height: 200px;  //height of links is fixed !!!
  }

*******************
10-SCROLL DYNAMIQUE
*******************
CSS:
  .fixed-nav .links-container { //links-container wraps links
      height: auto;             //height is dynamic !!!
  }

JS:
  const containerHeight = linksContainer.getBoundingClientRect().height;
    log(containerHeight);   /* 0 */
    const linksHeight = links.getBoundingClientRect().height;
    log(linksHeight);   /* 201.5833 */

    if(containerHeight === 0){linksContainer.style.height = `${linksHeight}px`;}
    else {linksContainer.style.height = 0;}

************************
10-SCROLL - FIXED NAVBAR
************************
const navbar = document.querySelector('#nav');/* <nav> tout en haut du HTML */
log(navbar);
const topLink = document.querySelector('.top-link'); /* <a> tout en bas */
log(topLink)

window.addEventListener('scroll', function(){
    const scrollHeight = window.pageYOffset; log(scrollHeight);
    const navHeight = navbar.getBoundingClientRect().height;
    if(scrollHeight > navHeight){ 
        navbar.classList.add('.fixed-nav');
    }else{
        navbar.classList.remove('.fixed-nav');
    }

    if(scrollHeight > 500){       //Le bouton retour apparait
        topLink.classList.add('show-link');
    }else{
        topLink.classList.remove('show-link');
    }
})

****************
10-SMOOTH SCROLL
****************
// select links
const scrollLinks = document.querySelectorAll('.scroll-link');
//log(scrollLinks);
scrollLinks.forEach(function(link){
    link.addEventListener('click', function(evt){
        evt.preventDefault();/* Bloque le déplacement vers l'adresse sélectionnée */
        //navigate to specific spot
        const id = evt.currentTarget.getAttribute('href').slice(1);     //Retire le '#'
        log('ID: '+ id);
        const element = document.getElementById(id);
        log(element);
        let position = element.offsetTop;
        log('Position:' + position);
        window.scrollTo({
            left:0,
            top:position
        })
        linksContainer.style.height=0;
    })
})


**********************
SMOOTH SCROLL COMPLETE
**********************

????

***********
VOCABULAIRE
***********
   element.offsetTop;
   window.pageYOffset;
   window.scrollTo({X, Y})
   evt.currentTarget.getAttribute('href')
   date.textContent, date.innerHTML
   navbar.getBoundingClientRect().height;

****
TABS
****
