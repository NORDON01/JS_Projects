/********************* J S   P R O J E C T S  *********************/

**************************
01-GENERER UN CODE COULEUR
**************************

//Affiche la couleur qui correspond au code 
//hexadecimal (#a5...8) sur 6 caractères (0,1...E, F):
document.body.style.backgroundColor = nbreHex;

//Affiche le code proprement dit (#a5...8)
color.textContent = nbreHex;

*********
04-NAVBAR
*********
=> 1 HTML: Bouton "Hamburger + liste <ul> de classe ".links"
    <button class="nav-toggle">
            <i class="fas fa-bars"></i>
    </button>

     <ul class="links">     //Liste à toggler (montrer/cacher)
        <li >
          <a href="index.html">home</a>
        </li>
        .../..
     </ul>        

=> 2 CSS: 2 classes pour montrer/cacher la liste de classe ".links"
     .links{
        height:0;
        overflow:hidden;
        transition: var(--transition);
     }

     .show-links{       //Cette classe est ajoutée ou supprimée(CSS!!!)
        height:10rem    //Pour 4 adresses <li>
     }
=> 3 JS: 
     const liste = document.querySelector('.links');
     const hamburger = document.querySelector('.nav-toggle');

    //Le(s) bouton(s) reçoivent des écouteurs !!!:
   -31 hamburger.addEventListener('click', function(){
    if(liste.classList.contains('show-links')){
        liste.classList.remove('show-links')
    }else{liste.classList.add('show-links')}
   })
            OU (si un seul bouton, une seule class)

    - 32 hamburger.addEventListener('click', function(){
        //Elmt à montrer/cacher.classList.toggle('CSS'): 
        links.classList.toggle('show-links');        
    })               
        log(links.classList);

********
06-MODAL
********
  A modal is a dialog box/popup window that is displayed on top of
  the current page - Open Modal.
  A widely adopted CSS naming practice is to use "hero" as the 
  class name applied to a site's main banner.

************************************
07-1- QUESTIONS - TRAVERSING THE DOM
************************************
const btns = document.querySelectorAll('.question-btn');
log(btns);

btns.forEach(function(btn){
    btn.addEventListener("click", function(evt){
        log(evt.currentTarget);
        //On "traverse" jusqu'au grand- parent du btn:
        const question = evt.currentTarget.parentElement.parentElement;
        //On ajoute / supprime la classe "show-text" à la classList du grand parent:
        question.classList.toggle("show-text");
    });
});
   
Où "question" est une classe du grand-parent des btns.

***************************************************
07-2 QUESTIONS - USING SELECTORS INSIDE THE ELEMENT
***************************************************
questions.forEach(function(question){
    /* Rechercher le bouton de la seule question (!= document): */
   const btn = question.querySelector('.question-btn');
   /* Ajouter un écouteur à ce seul bouton */
   btn.addEventListener('click', function(){
    /* Parcourir à nouveau la liste des questions (items) */
   questions.forEach(function(item){
    /* Comparer chaque item à la question qui reçoit l'écouteur */
    if(item !== question){
    item.classList.remove('show-text')}
    else {question.classList.toggle('show-text')}
   })
   })
})

********************************
08 DISPLAY ITEMS WHEN PAGE LOADS
********************************
HTML:
        <!-- single item 1 -->
        <article class="menu-item">
          <img src="./menu-item.jpeg" alt="photo" class="photo">
          <div class="item-info">
            <header>
              <h4>butter milk pancakes</h4>
              <h4 class="price">$15</h4>
            </header>
            <p class="item-text" >Lorem ipsum dolor sit amet consectetur adipisicing
               elit. Consequuntur voluptates quae velit? Ea atque 
               maxime soluta. Tempore maxime provident dolorem.</p>
          </div>
        </article>
        <!-- end single item 1 -->

app.js:
const log = console.log;
let displayMenu = []; 
const sectionCenter = document.querySelector('.section-center');
window.addEventListener('DOMContentLoaded', function(){
    displayMenu = menu.map(function(item){
    return `<article class="menu-item">
          <img src=${item.img} alt=${item.title} class="photo">
          <div class="item-info">
            <header>
              <h4>${item.title}</h4>
              <h4 class=${item.price}>$15</h4>
            </header>
            <p>${item.desc}</p>
          </div>
        </article>`
  })
  log(displayMenu);
  displayMenu = displayMenu.join("");
  sectionCenter.innerHTML = displayMenu;
})

***********
08-REFACTOR
***********
L'opération consiste à créer une fonction "displayMenuItems"
qui est paramétrable et peut recevoir n'importe quelle array d'items
dont "menu" qui comprend 9 items:


const sectionCenter = document.querySelector('.section-center');
window.addEventListener('DOMContentLoaded', function(){
    displayMenuItems(menu)              //Appel de la nouvelle fonction
})

function displayMenuItems(menuItems){   //Nouvelle fonction paramétrable
  let displayMenu = menuItems.map(function(item){
    return `<article class="menu-item">
          <img src=${item.img} alt=${item.title} class="photo">
          <div class="item-info">
            <header>
              <h4>${item.title}</h4>
              <h4 class=${item.price}>$15</h4>
            </header>
            <p>${item.desc}</p>
          </div>
        </article>`
  })
  log(displayMenu);
  displayMenu = displayMenu.join("");
  sectionCenter.innerHTML = displayMenu;
}

**************
FILTER BUTTONS
**************
   data- : data-id, data-category, data-price...these data sets ara attributes of
an element which make the element more specific?
 Dans le HTML, example: data-id="breakfast", data-id="all"...on aura:
 <button class="filter-btn" type="button" data-id="lunch">lunch</button>
 Et dans le JS (app.js):

 const filterBtns = document.querySelectorAll('.filter-btn');
filterBtns.forEach(function(btn){
  btn.addEventListener('click', function(evt){
  const category = evt.currentTarget.dataset.id;/*category critère de sélection */
  const menuCategory = menu.filter(function(menuItem){
   /* La fonction filter - filtre = category - */
   if(menuItem.category === category)return menuItem;
   })
   /* Display menuCategory */
   if(category === "all") {displayMenuItems(menu)}
   else {displayMenuItems(menuCategory)}
  })
})